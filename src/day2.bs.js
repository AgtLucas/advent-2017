// Generated by BUCKLESCRIPT VERSION 2.1.0, PLEASE EDIT WITH CARE
'use strict';

var $$Array     = require("bs-platform/lib/js/array.js");
var Curry       = require("bs-platform/lib/js/curry.js");
var $$String    = require("bs-platform/lib/js/string.js");
var Caml_array  = require("bs-platform/lib/js/caml_array.js");
var Caml_int32  = require("bs-platform/lib/js/caml_int32.js");
var Pervasives  = require("bs-platform/lib/js/pervasives.js");
var Caml_format = require("bs-platform/lib/js/caml_format.js");

function numberList(text) {
  var numbers = text.split((/\s+/g));
  return $$Array.map(Caml_format.caml_int_of_string, numbers);
}

function numberLines(text) {
  return $$Array.map(numberList, $$Array.map($$String.trim, text.split("\n")).filter((function (x) {
                    return +(x.length > 0);
                  })));
}

function listDiff(numbers) {
  return $$Array.fold_left(Pervasives.max, Pervasives.min_int, numbers) - $$Array.fold_left(Pervasives.min, Pervasives.max_int, numbers) | 0;
}

function checkSum(lines) {
  return $$Array.fold_left((function (prim, prim$1) {
                return prim + prim$1 | 0;
              }), 0, $$Array.map(listDiff, lines));
}

function solution(text) {
  return checkSum(numberLines(text));
}

console.log(checkSum(numberLines("5 1 9 5\n7 5 3\n2 4 6 8")), "18");

function find_divisor(others, number, index) {
  var len = others.length;
  var _i = 0;
  while(true) {
    var i = _i;
    if (i >= len) {
      return /* None */0;
    } else if (i === index) {
      _i = i + 1 | 0;
      continue ;
      
    } else if (Caml_int32.mod_(number, Caml_array.caml_array_get(others, i))) {
      _i = i + 1 | 0;
      continue ;
      
    } else {
      return /* Some */[Caml_int32.div(number, Caml_array.caml_array_get(others, i))];
    }
  };
}

function maybeFind(array, finder) {
  var _i = 0;
  while(true) {
    var i = _i;
    var match = Curry._2(finder, i, Caml_array.caml_array_get(array, i));
    if (match) {
      return /* Some */[match[0]];
    } else {
      var match$1 = +((i + 1 | 0) === array.length);
      if (match$1 !== 0) {
        return /* None */0;
      } else {
        _i = i + 1 | 0;
        continue ;
        
      }
    }
  };
}

function forceUnwrap(message, opt) {
  if (opt) {
    return opt[0];
  } else {
    return Pervasives.failwith(message);
  }
}

function divisors(numbers) {
  return forceUnwrap("Unable to find the divisors", maybeFind(numbers, (function (index, number) {
                    return find_divisor(numbers, number, index);
                  })));
}

function solution2(text) {
  return $$Array.fold_left((function (prim, prim$1) {
                return prim + prim$1 | 0;
              }), 0, $$Array.map(divisors, numberLines(text)));
}

var input = "\n5 9 2 8\n9 4 7 3\n3 8 6 5\n";

console.log(solution2(input), 9);

exports.numberList   = numberList;
exports.numberLines  = numberLines;
exports.listDiff     = listDiff;
exports.checkSum     = checkSum;
exports.solution     = solution;
exports.find_divisor = find_divisor;
exports.maybeFind    = maybeFind;
exports.forceUnwrap  = forceUnwrap;
exports.divisors     = divisors;
exports.solution2    = solution2;
exports.input        = input;
/*  Not a pure module */
