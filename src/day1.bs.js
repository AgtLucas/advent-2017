// Generated by BUCKLESCRIPT VERSION 2.1.0, PLEASE EDIT WITH CARE
'use strict';

var $$Array     = require("bs-platform/lib/js/array.js");
var Caml_array  = require("bs-platform/lib/js/caml_array.js");
var Caml_int32  = require("bs-platform/lib/js/caml_int32.js");
var Caml_format = require("bs-platform/lib/js/caml_format.js");

function digitSum(digits) {
  var last = Caml_array.caml_array_get(digits, digits.length - 1 | 0);
  return $$Array.fold_left((function (param, current) {
                  var total = param[0];
                  var match = +(param[1] === current);
                  return /* tuple */[
                          match !== 0 ? total + current | 0 : total,
                          current
                        ];
                }), /* tuple */[
                0,
                last
              ], digits)[0];
}

function digitList(text) {
  var digits = text.split("");
  return $$Array.map(Caml_format.caml_int_of_string, digits);
}

function solution(text) {
  return digitSum(digitList(text));
}

function halfway(len, i) {
  return Caml_int32.mod_(i + (len / 2 | 0) | 0, len);
}

function digitHalfSum(digits) {
  var len = digits.length;
  return $$Array.fold_left((function (param, current) {
                  var i = param[1];
                  var total = param[0];
                  var match = +(current === Caml_array.caml_array_get(digits, halfway(len, i)));
                  return /* tuple */[
                          match !== 0 ? total + current | 0 : total,
                          i + 1 | 0
                        ];
                }), /* tuple */[
                0,
                0
              ], digits)[0];
}

function solution2(text) {
  return digitHalfSum(digitList(text));
}

exports.digitSum     = digitSum;
exports.digitList    = digitList;
exports.solution     = solution;
exports.halfway      = halfway;
exports.digitHalfSum = digitHalfSum;
exports.solution2    = solution2;
/* No side effect */
